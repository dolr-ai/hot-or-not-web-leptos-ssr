name: Build and Check linting for preview release

on:
  workflow_call:
    inputs:
      publish-artifact:
        default: false
        required: false
        type: boolean
      erase_components:
        description: "Enable type erasure. Default is false."
        required: false
        default: false
        type: boolean
  workflow_dispatch:
    inputs:
      erase_components:
        description: "Enable type erasure."
        required: false
        default: false
        type: boolean

jobs:
  build_check:
    runs-on: warp-ubuntu-latest-x64-32x
    steps:
      - name: Set Swap Space # Needed to fix OOM error in runner
        uses: pierotofy/set-swap-space@master
        with:
          swap-size-gb: 8

      - name: Checkout repo and submodules
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Install mold linker
        uses: rui314/setup-mold@v1

      - name: Rust Setup
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: "nightly-2025-06-15"
          targets: "x86_64-unknown-linux-musl,wasm32-unknown-unknown"
          components: "clippy,rustfmt"
          override: true

      - uses: cargo-bins/cargo-binstall@main
      - name: cargo-leptos setup
        run: cargo binstall --no-confirm cargo-leptos --version 0.2.40 --locked

      # - name: Cache rust dependencies and build output
      #   uses: Swatinem/rust-cache@v2

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - uses: pnpm/action-setup@v3
        name: Install pnpm
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install npm deps
        run: pnpm install

      - uses: awalsh128/cache-apt-pkgs-action@v1
        with:
          packages: musl-tools protobuf-compiler
          version: 1.0

      # - name: Install clippy
      #   run: |
      #     rustup component add clippy
      #     rustup component add rustfmt

      # - name: lint check
      #   run: |
      #     cargo fmt --check
      #     cargo clippy --no-deps --all-features --release -- -D warnings
      #   env:
      #     RUSTUP_TOOLCHAIN: "nightly-2025-06-15"

      - name: Print Rust and Cargo version
        run: |
          rustc --version
          cargo --version

      - name: Build the Leptos project to `musl` output
        run: |
          RUSTFLAGS_VALUE=""
          if [[ "${{ inputs.erase_components }}" == "true" ]]; then
            RUSTFLAGS_VALUE="--cfg=erase_components"
          fi
          echo "Using RUSTFLAGS: $RUSTFLAGS_VALUE"
          # Build with debug symbols for WASM (--wasm-debug flag)
          RUSTFLAGS="$RUSTFLAGS_VALUE" cargo leptos build --release --lib-features release-lib --bin-features release-bin
        env:
          RUSTUP_TOOLCHAIN: "nightly-2025-06-15"
          LEPTOS_BIN_TARGET_TRIPLE: x86_64-unknown-linux-musl
          LEPTOS_HASH_FILES: true
          LEPTOS_TAILWIND_VERSION: v4.1.7

      - name: Extract and save WASM debug info
        run: |
          # Save WASM file size info
          echo "WASM file sizes (with debug symbols):"
          ls -lh target/site/pkg/*.wasm || true

          # Check for debug sections in WASM
          if command -v wasm-objdump &> /dev/null; then
            echo "Debug sections in WASM:"
            wasm-objdump -h target/site/pkg/*.wasm | grep -i "custom\|debug" || true
          fi

      - name: Setup Sentry CLI
        uses: matbour/setup-sentry-cli@v2
        with:
          url: https://sentry.yral.com
          token: ${{ secrets.SENTRY_AUTH_TOKEN }}
          organization: sentry
          project: leptos-ssr-server

      - name: Upload Sentry debug files for Server
        run: |
          # Extract debug symbols from server binary
          objcopy --only-keep-debug target/x86_64-unknown-linux-musl/prod-release/hot-or-not-web-leptos-ssr{,.d}
          objcopy --strip-debug --strip-unneeded target/x86_64-unknown-linux-musl/prod-release/hot-or-not-web-leptos-ssr
          objcopy --add-gnu-debuglink target/x86_64-unknown-linux-musl/prod-release/hot-or-not-web-leptos-ssr{.d,}

          # Upload server debug files with source context
          echo "Uploading server debug symbols to Sentry (leptos-ssr-server)..."
          sentry-cli debug-files upload --org sentry --project leptos-ssr-server --auth-token $SENTRY_AUTH_TOKEN --include-sources . || true

          # Create release for server
          export SENTRY_RELEASE="${GITHUB_SHA:0:7}"
          sentry-cli releases new "$SENTRY_RELEASE" --org sentry --project leptos-ssr-server || true
          sentry-cli releases set-commits "$SENTRY_RELEASE" --org sentry --project leptos-ssr-server --auto || true
          sentry-cli releases finalize "$SENTRY_RELEASE" --org sentry --project leptos-ssr-server || true

          echo "Server release $SENTRY_RELEASE created and debug files uploaded"
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        continue-on-error: true

      - name: Upload Sentry debug files for Browser (WASM)
        run: |
          # Upload WASM debug files for browser project
          export SENTRY_RELEASE="${GITHUB_SHA:0:7}"

          echo "Uploading WASM debug files to Sentry (leptos-ssr-browser)..."
          if [ -d "target/site/pkg" ]; then
            # Upload WASM files with debug symbols
            sentry-cli debug-files upload --org sentry --project leptos-ssr-browser --auth-token $SENTRY_AUTH_TOKEN --include-sources target/site/pkg/*.wasm || true
            
            # Also upload JS files for better context
            sentry-cli debug-files upload --org sentry --project leptos-ssr-browser --auth-token $SENTRY_AUTH_TOKEN target/site/pkg/*.js || true
          fi

          # Create and finalize release for browser project
          sentry-cli releases new "$SENTRY_RELEASE" --org sentry --project leptos-ssr-browser || true
          sentry-cli releases set-commits "$SENTRY_RELEASE" --org sentry --project leptos-ssr-browser --auto || true
          sentry-cli releases finalize "$SENTRY_RELEASE" --org sentry --project leptos-ssr-browser || true

          echo "Browser release $SENTRY_RELEASE created and WASM debug files uploaded"
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        continue-on-error: true

      - run: touch .empty
      - name: Archive production artifacts
        uses: actions/upload-artifact@v4
        if: ${{ inputs.publish-artifact }}
        with:
          name: build-musl
          path: |
            target/x86_64-unknown-linux-musl/prod-release/hot-or-not-web-leptos-ssr
            target/x86_64-unknown-linux-musl/prod-release/hash.txt
            target/site
            target/x86_64-unknown-linux-musl/prod-release/hot-or-not-web-leptos-ssr.debug
            target/site/pkg/*.wasm
            .empty

      - name: Find and display hash file
        run: |
          find . -name "hash.txt" -type f
      # - name: Tree files
      #   run: |
      #     tree
