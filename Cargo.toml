[package]
name = "hot-or-not-web-leptos-ssr"
version = "0.1.0"
edition = "2021"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
axum = { version = "0.7", optional = true, features = ["macros"] }
console_error_panic_hook = "0.1"
console_log = "1"
leptos = { version = "0.6", features = ["nightly"] }
leptos_axum = { version = "0.6", optional = true }
leptos_meta = { version = "0.6", features = ["nightly"] }
leptos_router = { version = "0.6", features = ["nightly"] }
log = "0.4"
simple_logger = "4.0"
tokio = { version = "1", optional = true }
tower = { version = "0.4", optional = true }
tower-http = { version = "0.5", features = ["fs"], optional = true }
wasm-bindgen = "=0.2.92"
thiserror = "1.0"
tracing = { version = "0.1.37", optional = true }
http = "1.0"
serde = { version = "1.0", features = ["derive"] }
candid = "0.10.3"
ic-agent = { version = "0.33.0", default-features = false, features = [
    "pem",
    "reqwest",
] }
serde-wasm-bindgen = { version = "0.6.3" }
futures = "0.3.30"
leptos-use = "0.10.2"
reqwest = { version = "0.11.24", default-features = false, features = [
    "json",
    "http2",
] }
serde_bytes = "0.11.14"
hex = "0.4.3"
leptos_icons = "0.3.0"
icondata = "0.3.0"
gloo = { version = "0.11.0", features = ["futures", "net", "net"] }
once_cell = "1.19.0"
web-time = "1.0.0"
k256 = { version = "0.13.3", default-features = false, features = ["std"] }
icondata_core = "0.1.0"
serde_json = "1.0"
crc32fast = "1.4.0"
uts2ts = "0.4.1"
rand_chacha = { version = "0.3.1", optional = true }
web-sys = { version = "0.3", features = [
    "Clipboard",
    "Navigator",
    "ShareData",
], optional = true }
circular-buffer = "0.1.7"

[build-dependencies]
serde = { version = "1.0", features = ["derive"] }
candid_parser = "0.1.1"
serde_json = "1.0.110"
convert_case = "0.6.0"

[features]
hydrate = [
    "leptos/hydrate",
    "leptos_meta/hydrate",
    "leptos_router/hydrate",
    "ic-agent/wasm-bindgen",
    "reqwest/native-tls",
    "web-sys",
]
ssr = [
    "dep:axum",
    "dep:tokio",
    "dep:tower",
    "dep:tower-http",
    "dep:leptos_axum",
    "leptos/ssr",
    "leptos_meta/ssr",
    "leptos_router/ssr",
    "dep:tracing",
    "leptos-use/ssr",
    "reqwest/rustls-tls",
]
# Fetch mock referral history instead of history via canister
mock-referral-history = ["rand_chacha", "k256/arithmetic"]
# Fetch mock wallet transactions instead of history via canister
mock-wallet-history = ["rand_chacha"]
mock-history = ["mock-referral-history", "mock-wallet-history"]
cloudflare = []
release-bin = ["ssr", "cloudflare"]
release-lib = ["hydrate", "cloudflare"]

[patch.crates-io]
# release with hyper v1 is not out yet
reqwest = { git = "https://github.com/seanmonstar/reqwest.git", rev = "e3192638518d577759dd89da489175b8f992b12f" }

# https://github.com/seanmonstar/reqwest/pull/2059
# reqwest = { git = "https://github.com/seanmonstar/reqwest.git", branch = "hyper-v1" }
# Defines a size-optimized profile for the WASM bundle in release mode
[profile.wasm-release]
inherits = "release"
opt-level = 'z'
lto = true
codegen-units = 1
panic = "abort"

[package.metadata.leptos]
# The name used by wasm-bindgen/cargo-leptos for the JS/WASM bundle. Defaults to the crate name
output-name = "hot-or-not-leptos-ssr"

# The site root folder is where cargo-leptos generate all output. WARNING: all content of this folder will be erased on a rebuild. Use it in your server setup.
site-root = "target/site"

# The site-root relative folder where all compiled output (JS, WASM and CSS) is written
# Defaults to pkg
site-pkg-dir = "pkg"

# [Optional] The source CSS file. If it ends with .sass or .scss then it will be compiled by dart-sass into CSS. The CSS is optimized by Lightning CSS before being written to <site-root>/<site-pkg>/app.css
#style-file = "style/main.scss"

# The tailwind input file.
tailwind-input-file = "style/input.css"

# The tailwind config file.
tailwind-config-file = "tailwind.config.js"

# Enables additional file hashes on outputted css, js, and wasm files
#
# Optional: Defaults to false. Can also be set with the LEPTOS_HASH_FILES=false env var
hash-files = true

# Assets source dir. All files found here will be copied and synchronized to site-root.
# The assets-dir cannot have a sub directory with the same name/path as site-pkg-dir.
#
# Optional. Env: LEPTOS_ASSETS_DIR.
assets-dir = "public"

# The IP and port (ex: 127.0.0.1:3000) where the server serves the content. Use it in your server setup.
site-addr = "127.0.0.1:3000"

# The port to use for automatic reload monitoring
reload-port = 3001

# [Optional] Command to use when running end2end tests. It will run in the end2end dir.
#   [Windows] for non-WSL use "npx.cmd playwright test"
#   This binary name can be checked in Powershell with Get-Command npx
end2end-cmd = "npx playwright test"
end2end-dir = "end2end"

#  The browserlist query used for optimizing the CSS.
browserquery = "defaults"

# Set by cargo-leptos watch when building with that tool. Controls whether autoreload JS will be included in the head
watch = false

# The environment Leptos will run in, usually either "DEV" or "PROD"
env = "DEV"

# The features to use when compiling the bin target
#
# Optional. Can be over-ridden with the command line parameter --bin-features
bin-features = ["ssr"]

# If the --no-default-features flag should be used when compiling the bin target
#
# Optional. Defaults to false.
bin-default-features = false

# The features to use when compiling the lib target
#
# Optional. Can be over-ridden with the command line parameter --lib-features
lib-features = ["hydrate"]

# If the --no-default-features flag should be used when compiling the lib target
#
# Optional. Defaults to false.
lib-default-features = false

# The profile to use for the lib target when compiling for release
#
# Optional. Defaults to "release".
lib-profile-release = "wasm-release"

# Pass additional parameters to the cargo process compiling to WASM
#
# Optional. No default
lib-cargo-args = ""

# Pass additional parameters to the cargo process to build the server
#
# Optional. No default
bin-cargo-args = ""
